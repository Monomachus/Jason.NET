// Copyright (C) 2003  Rafael H. Bordini, Jomi F. Hubner, et al.
// 
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
// 
// To contact the authors:
// http://www.dur.ac.uk/r.bordini
// http://www.inf.furb.br/~jomi
//
//----------------------------------------------------------------------------


options {
   FORCE_LA_CHECK=true;
   STATIC=false;
   IGNORE_CASE=false;
}

PARSER_BEGIN(as2j)

  package jason.asSyntax.parser;

  import java.util.*;
  import java.io.*;
  import jason.asSyntax.*;
  import jason.asSyntax.directives.*;
  import jason.asSemantics.*;
  import jason.bb.*;
  import jason.*;
  import jason.asSyntax.ArithExpr.ArithmeticOp;
  import jason.asSyntax.LogExpr.LogicalOp;
  import jason.asSyntax.RelExpr.RelationalOp;
  import jason.asSyntax.BodyLiteral.BodyType;
  import jason.asSyntax.Trigger.TEOperator;
  import jason.asSyntax.Trigger.TEType;

  public class as2j {

    private String name;
    private File source = null;

    private PrintStream out = System.out;

    /* Auxiliary Functions */

    void setName(String n) {
    	name = n;
    }

    void setSource(File f) {
        source = f;
    }
  }

PARSER_END(as2j)

SKIP : {
 " "
|  "\t"
|  "\n"
|  "\r"
|  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
|  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

// Note: i do not why, but vars must be defined before TK_BEGIN and END
TOKEN : {
  <VAR : (<UP_LETTER> (<CHAR>)*) >
}

TOKEN : {
// Predefined
  <TK_TRUE:   "true">
| <TK_FALSE:  "false">
| <TK_NOT:    "not">
| <TK_NEG:    "~">
| <TK_INTDIV: "div">
| <TK_INTMOD: "mod">
| <TK_BEGIN:  "begin" >
| <TK_END:    "end" >
| <TK_LABEL_AT: "@"> // special chars

// Numbers
|  <NUMBER: ["0"-"9"] (["0"-"9"])*
          | (["0"-"9"])* "." (["0"-"9"])+ (<EXPONENT>)?
          | (["0"-"9"])+ <EXPONENT> >
|  <EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+>

// Strings
|  <STRING: "\"" ( ~["\"","\\","\n","\r"]
                 | "\\" ( ["n","t","b","r","f","\\","\'","\""]
                        | ["0"-"7"] (["0"-"7"])?
                        | ["0"-"3"] ["0"-"7"] ["0"-"7"]))* "\"">

// Identifiers
|  <ATOM      : (<LC_LETTER> | "." <CHAR>) (<CHAR> | "." <CHAR>)*>
|  <UNNAMEDVAR: ("_" (["0"-"9"])*) >
|  <CHAR      : (<LETTER> | <DIGIT> | "_")>
|  <LETTER    : ( <LC_LETTER> | <UP_LETTER> )>
|  <LC_LETTER : ["a"-"z"]>
|  <UP_LETTER : ["A"-"Z"]>
|  <DIGIT     : ["0"-"9"]>
}

/* AgentSpeak Grammar */

void agent(Agent a) throws jason.JasonException :  
                       {
                         Agent   na;
                       }
{ 
  ( 
    agent_component(a)
  |
    na = directive(a)
                       { // import bels, plans and initial goals from agent a
                         if (a != null && na != null) a.importComponents(na);
                       }
  )*
  <EOF>
}

void agent_component(Agent a) throws jason.JasonException :  
                       { Literal b;
                         Literal g;
                         Plan    p;
                       }
{
  ( 
    b = belief()       { if (a != null) a.addInitialBel(b); }
  |
    g = initial_goal() { if (a != null) a.addInitialGoal(g); } 
  |
    p = plan()         { if (a != null) a.getPL().add(p); }
  )
}


/* Beliefs & Rules */
Literal belief() : { Literal h; Object t; }
{ 
    h=literal()
    [
      ":-" t = log_expr()    { h = new Rule(h,(LogicalFormula)t); }
    ] 
    "."                      { return h; } 
}


/* Initial goals */
Literal initial_goal() : { Literal g; }
{
  "!" g=literal() "."    {  return g; } 
}


/* Directive */
Agent directive(Agent outerAg) throws jason.JasonException : 
                     { 
                        Pred dir = null;
                     }
{
  ( LOOKAHEAD(4)
    "{" dir = pred() "}"
                     { return DirectiveProcessor.process(dir, outerAg, null); }
  | 
    "{" <TK_BEGIN> dir = pred() "}"
                     { Agent dirAg = new Agent(); } 
                     
     	( agent_component(dirAg) )*
    "{" <TK_END> "}"
                     { return DirectiveProcessor.process(dir, outerAg, dirAg); }
  )
}


/* Plan */
Plan plan() :         { Token k; Pred L = null; 
                        Trigger T; Object C = null; 
                        ArrayList B = new ArrayList(); 
                        int start = -1, end;}
{
    [ k = <TK_LABEL_AT> L=pred()  { start = k.beginLine; }   ]
    T=trigger()         
    [ k = ":"  C=log_expr()      { if (start == -1) start = k.beginLine; } ] 
    [ k = "<-" plan_body(B)      { if (start == -1) start = k.beginLine; } ]  
    k = "."                      { if (start == -1) start = k.beginLine; } 
                   { end = k.beginLine;
                     Plan p = new Plan(L,T,(LogicalFormula)C,B);
                     p.setSourceLines(start,end);
                     return p;}
                   }

/* Trigger */
Trigger trigger() : 
               { 
               		TEOperator teOp;
			    	TEType     teType = TEType.belief;
				 	Literal F; 
               }
{
  ( "+"        { teOp = TEOperator.add; }
  | "-"        { teOp = TEOperator.del; }
  )
  
  [ ( "!"      { teType = TEType.achieve; }
    | "?"      { teType = TEType.test; }
    )
  ]
  
  ( F=literal()
  | F=var()
  )            { return new Trigger(teOp,teType,F); }
}

/* Literal */
Literal literal() :  { Pred F; Token k; boolean type = Literal.LPos; }
{
  ( ( [ <TK_NEG>              { type = Literal.LNeg; }
      ]
      F=pred()                { return new Literal(type,F); }
    )
  | k=<TK_TRUE>               { return Literal.LTrue; } 
  | k=<TK_FALSE>              { return Literal.LFalse; } 
  )
}


/* Plan body */
void plan_body(ArrayList bd) : { BodyLiteral F; }
{
  F=body_formula()         { if (! F.getLogicalFormula().equals(Literal.LTrue)) {
                               bd.add(F);
                             } 
                           }
                 
  [ ";" plan_body(bd) ]
}


BodyLiteral body_formula() :  { Literal A; Token k;
                                BodyType formType = BodyType.action;
                                Object L;
                                Object rel; VarTerm v;
                              }
{
 
 ( LOOKAHEAD(4)
   // goals and belief updates
   (  "!"              { formType = BodyType.achieve; }
    | "!!"             { formType = BodyType.achieveNF; }
    | "?"              { formType = BodyType.test; }
    | "+"              { formType = BodyType.addBel; }
    | ( "-"            { formType = BodyType.delBel; }
        ["+"           { formType = BodyType.delAddBel; }
        ]
      ) 
   )
   ( A = literal()     { return new BodyLiteral(formType,A); }
   | v = var()         { return new BodyLiteral(formType,v); } // used in communication "+C"
   | "(" L = log_expr() ")" 
                       { if (formType == BodyType.test && L instanceof LogExpr) {
                            return new BodyLiteral((LogExpr)L);  // used in ?(a & b)
                         } else {
                            throw new ParseException("(<logical formula>) can be used only with test goal.");
                         }
                       }
   )
 |
  // actions or expressions
  rel = rel_expr()
                       { if (rel instanceof Literal) {
                          return new BodyLiteral(formType, (Literal)rel);
                         } else {
                          return new BodyLiteral((RelExpr)rel); 
                         }
                       }
 )
}


/* Annotated Formulae */
Pred pred() :       { Token K; Pred p; Term t; List l; ListTerm lt;}
{
  (
   K=<ATOM>
   |
   K=<TK_BEGIN>
   |
   K=<TK_END>
  )                  { p = new Pred(K.image);
                       p.setSrcLine(K.beginLine);
                     } 
  
  [
      "(" l = terms() 
      ")"           { p.addTerms(l); }
  ]
  [ 
      lt = list()   { p.setAnnots(lt); }
  ] 
  { return p; }
}


/* List of terms */
List terms() : { List listTerms = new ArrayList(); Term v; }
{
  v=term()             { listTerms.add(v); } 
  ( "," v=term()       { listTerms.add(v); }
  )* 
                       { return listTerms; }
}


Term term() :       { Term u; Object o; }
{
  ( u=literal()     { Literal l = (Literal)u;
                      if (l.isAtom() && !l.negated()) {
                         Atom a = new Atom(l.getFunctor());
                         a.setSrcLine(l.getSrcLine());
                         return a;
                      }
                    }
  | u=list()        
  | o=arithm_expr() { return (Term)o; }
  | u=string()      
  )
  { return u; }
}


ListTermImpl list() : { ListTermImpl lt = new ListTermImpl(); ListTerm last; 
                        Token K; Term f; }
{
  "["
  [
  f=term()                { last = lt.append(f); lt.setSrcLine(f.getSrcLine()); }
  ( "," f=term()          { last = last.append(f); }
  )*
  [ "|"  ( K=<VAR>        { last.setNext(new VarTerm(K.image)); }
         | K=<UNNAMEDVAR> { last.setNext(new UnnamedVar()); }
         | f=list()       { last = last.concat((ListTerm)f); }
         )           
  ]
  ]
  "]"                     { return lt; } 
}


/* logical expression */

Object log_expr() :       
                         { Object t1, t2; }
{					
   t1 = log_expr_trm()         
[  "|" t2 = log_expr()   { return new LogExpr((LogicalFormula)t1,LogicalOp.or,(LogicalFormula)t2); } ]
                         { return t1; }
}

Object log_expr_trm() : 
                           { Object t1, t2; }
{
   t1 = log_expr_factor()    
[  "&" t2 = log_expr_trm() { return new LogExpr((LogicalFormula)t1,LogicalOp.and,(LogicalFormula)t2); } ]
                           { return t1; }
}

Object log_expr_factor():             
                                    { Object t; }
{
(  
  <TK_NOT> t = log_expr_factor()    { return new LogExpr(LogicalOp.not,(LogicalFormula)t); } 
 | 
  t = rel_expr()                    { return t; } 
)
}


/* relational expression 
   used in context, body and term
   
     <VAR>      [ <OPREL> <EXP> ]  --> this method returns the VarTerm
   | <LITERAL>  [ <OPREL> <EXP> ]  --> returns the Literal
   | <EXP>      [ <OPREL> <EXP> ]  --> returns the ExprTerm 
*/
Object rel_expr() :               
                                          {  Object op1 = null;
                                             Object op2 = null;
                                             RelationalOp operator = RelationalOp.none;
                                           }
{
    (   op1 = arithm_expr()                
      | op1 = literal()
      | op1 = string()
    )
                     
    [
       ( "<"                               { operator = RelationalOp.lt; } 
       | "<="                              { operator = RelationalOp.lte; } 
       | ">"                               { operator = RelationalOp.gt; } 
       | ">="                              { operator = RelationalOp.gte; } 
       | "=="                              { operator = RelationalOp.eq; } 
       | "\\=="                            { operator = RelationalOp.dif; } 
       | "="                               { operator = RelationalOp.unify; } 
       | "=.."                             { operator = RelationalOp.literalBuilder; } 
       )

       (   op2 = arithm_expr()        
         | op2 = literal()
         | op2 = string()               
         | op2 = list()
       )

                                           { return new RelExpr((Term)op1, operator, (Term)op2); }
    ]
                                           { return op1; }
}


/* arithmetic expression */
Object arithm_expr() :        { Object t1, t2; ArithmeticOp op;}
{
   t1 = arithm_expr_trm()     { op = ArithmeticOp.none; }
[  ( "+"                      { op = ArithmeticOp.plus;} 
   | "-"                      { op = ArithmeticOp.minus;}
   )
   t2 = arithm_expr()         { if (!(t1 instanceof NumberTerm)) {
                                   throw new ParseException("ArithExpr: first operand is not numeric or variable.");
                                }
                                if (!(t2 instanceof NumberTerm)) {
                                   throw new ParseException("ArithExpr: second operand is not numeric or variable.");
                                }
                                return new ArithExpr((NumberTerm)t1, op, (NumberTerm)t2); 
                              }
]                             { return t1; }
}

Object arithm_expr_trm() :      { Object t1, t2; ArithmeticOp op;}
{
   t1 = arithm_expr_factor()    { op = ArithmeticOp.none; }
[  ( "*"                        { op = ArithmeticOp.times; } 
   | "/"                        { op = ArithmeticOp.div; }
   | <TK_INTDIV>                { op = ArithmeticOp.intdiv; }
   | <TK_INTMOD>                { op = ArithmeticOp.mod; }
   )
   t2 = arithm_expr_trm()       { if (!(t1 instanceof NumberTerm)) {
                                    throw new ParseException("ArithTerm: first operand is not numeric or variable.");
                                  }
                                  if (!(t2 instanceof NumberTerm)) {
                                    throw new ParseException("ArithTerm: second operand is not numeric or variable.");
                                  }
                                  return new ArithExpr((NumberTerm)t1, op, (NumberTerm)t2); 
                                }
]                               { return t1; }
}

Object arithm_expr_factor():   
                                { Object t1, t2; ArithmeticOp op;}
{
   t1 = arithm_expr_simple()    { op = ArithmeticOp.none; }
[  ( "**"                       { op = ArithmeticOp.pow; }
   )
   t2 = arithm_expr_factor()    { if (!(t1 instanceof NumberTerm)) {
                                    throw new ParseException("ArithFactor: first operand is not numeric or variable.");
                                  }
                                  if (!(t2 instanceof NumberTerm)) {
                                    throw new ParseException("ArithFactor: second operand is not numeric or variable.");
                                  }
                                  return new ArithExpr((NumberTerm)t1, op, (NumberTerm)t2); 
                                }
]                               { return t1; }
}


Object arithm_expr_simple():    
                                { Token K; Object t; VarTerm v; NumberTermImpl n;}
{
 ( K = <NUMBER>                 { n = new NumberTermImpl(K.image); 
                                  n.setSrcLine(K.beginLine); 
                                  return n;
                                }
 | "-" t = arithm_expr_simple() { if (!(t instanceof NumberTerm)) {
                                    throw new ParseException("operator '-' applied to argument not numeric or variable.");
                                  }
                                  return new ArithExpr(ArithmeticOp.minus, (NumberTerm)t); 
                                }
 | "(" t = log_expr() ")"       { return t; }
 | v = var()                    { return v; }
 )
}


VarTerm var():      { Token K; VarTerm v; ListTerm lt; }
{
 ( K = <VAR>        { v = new VarTerm(K.image); v.setSrcLine(K.beginLine); }
 | K = <UNNAMEDVAR> { v = new UnnamedVar(); }
 )
 [ 
   lt = list()      { v.setAnnots(lt); }
 ]
                    { return v; }
}

StringTerm string():{ Token k; StringTermImpl s; }
{
  k = <STRING>      { s = new StringTermImpl(k.image.substring(1,k.image.length()-1)); 
                      s.setSrcLine(k.beginLine); 
                      return s;
                    } 
}

/* Generated By:JavaCC: Do not edit this line. as2j.java */
  package jason.asSyntax.parser;

  import java.util.*;
  import java.io.*;
  import jason.asSyntax.*;
  import jason.asSemantics.*;

  public class as2j implements as2jConstants {

    private String name;
    private File source = null;

    private PrintStream out = System.out;

    /* Auxiliary Functions */

    void setName(String n) {
        name = n;
    }

    void setSource(File f) {
        source = f;
    }

/* AgentSpeak Grammar */
  final public void ag(Agent a) throws ParseException {
                     List bbl = new LinkedList(); PlanLibrary pp;
    bs(bbl);
    pp = ps();
    jj_consume_token(0);
                if (a != null) {
                    a.addPS(pp);

                    // add beliefs (when the plans are loaded, so the events are relevant
                    Iterator i = bbl.iterator();
                    while (i.hasNext()) {
                       Literal l = (Literal)i.next();
                       Circumstance c = null;
                       try {
                          c = a.getTS().getC();
                       } catch (Exception e) {}
                       a.addBel(l, BeliefBase.TSelf, c, Intention.EmptyInt);
                    }
                 }
  }

/* Beliefs */
  final public void bs(List bbl) throws ParseException {
                      Literal F;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_TRUE:
      case TK_FALSE:
      case TK_NEG:
      case ATOM:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      F = l();
      jj_consume_token(22);
                       if(!F.isGround()) {
                                            {if (true) throw new ParseException("Error: Initial belief must be ground!\n       Cannot use "+F+" as initial belief.");}
                       }
                       bbl.add(F);
    }
  }

/* Plans */
  final public PlanLibrary ps() throws ParseException {
                     PlanLibrary pp = new PlanLibrary(); Plan pl;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_LABEL_AT:
      case 25:
      case 26:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      pl = p();
                     pp.add(pl);
    }
                     {if (true) return pp;}
    throw new Error("Missing return statement in function");
  }

/* Plan */
  final public Plan p() throws ParseException {
                     Trigger T; ArrayList C; ArrayList H; Pred L = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_LABEL_AT:
      jj_consume_token(TK_LABEL_AT);
      L = at();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    T = te();
    jj_consume_token(23);
    C = ct();
    jj_consume_token(24);
    H = bd();
    jj_consume_token(22);
                     {if (true) return new Plan(L,T,C,H);}
    throw new Error("Missing return statement in function");
  }

/* Trigger */
  final public Trigger te() throws ParseException {
                        boolean teType;
                                byte    teGoal = Trigger.TEBel;
                                        Literal F;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 25:
      jj_consume_token(25);
                 teType = Trigger.TEAdd;
      break;
    case 26:
      jj_consume_token(26);
                 teType = Trigger.TEDel;
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 27:
    case 28:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 27:
        jj_consume_token(27);
                 teGoal = Trigger.TEAchvG;
        break;
      case 28:
        jj_consume_token(28);
                 teGoal = Trigger.TETestG;
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    F = l();
                 {if (true) return new Trigger(teType,teGoal,F);}
    throw new Error("Missing return statement in function");
  }

/* Literal */
  final public Literal l() throws ParseException {
                 Pred F; Token k; boolean type = Literal.LPos;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_NEG:
    case ATOM:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_NEG:
        jj_consume_token(TK_NEG);
                                type = Literal.LNeg;
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      F = at();
                                {if (true) return new Literal(type,F);}
      break;
    case TK_TRUE:
      k = jj_consume_token(TK_TRUE);
                                {if (true) return Literal.LTrue;}
      break;
    case TK_FALSE:
      k = jj_consume_token(TK_FALSE);
                                {if (true) return Literal.LFalse;}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* Plan context */
  final public ArrayList ct() throws ParseException {
                      DefaultLiteral P; ArrayList C = new ArrayList(); List CT;
    P = dl();
                      if (!P.getLiteral().equals(Literal.LTrue)) {
                        C.add(P);
                      }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 29:
      jj_consume_token(29);
      CT = ct();
                      C.addAll(CT);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
                      {if (true) return C;}
    throw new Error("Missing return statement in function");
  }

  final public DefaultLiteral dl() throws ParseException {
                        boolean isPos = DefaultLiteral.LDefPos;
                        Term rel = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_NOT:
      jj_consume_token(TK_NOT);
                        isPos = DefaultLiteral.LDefNeg;
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    rel = re();
                        if (rel.isVar()) {
                          {if (true) return new DefaultLiteral(isPos, (VarTerm)rel);}
                        } else if (rel.isLiteral()) {
                          {if (true) return new DefaultLiteral(isPos, (Literal)rel);}
                        } else {
                          {if (true) return new DefaultLiteral(isPos, new Literal(rel));}
                        }
    throw new Error("Missing return statement in function");
  }

/* Plan body */
  final public ArrayList bd() throws ParseException {
                   BodyLiteral F;
                   ArrayList BD = new ArrayList();
                   List BD2;
    F = f();
                   if (! F.getLiteral().equals(Literal.LTrue)) {
                      BD.add(F);
                   }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 30:
      jj_consume_token(30);
      BD2 = bd();
                   BD.addAll(BD2);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
                   {if (true) return BD;}
    throw new Error("Missing return statement in function");
  }

  final public BodyLiteral f() throws ParseException {
                        Literal A; Token k;
                        byte formType = BodyLiteral.HAction;
                        Term rel;
    if (jj_2_1(4)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 27:
        jj_consume_token(27);
                        formType = BodyLiteral.HAchieve;
        break;
      case 28:
        jj_consume_token(28);
                        formType = BodyLiteral.HTest;
        break;
      case 25:
        jj_consume_token(25);
                        formType = BodyLiteral.HAddBel;
        break;
      case 26:
        jj_consume_token(26);
                        formType = BodyLiteral.HDelBel;
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_TRUE:
      case TK_FALSE:
      case TK_NEG:
      case ATOM:
        A = l();
                        {if (true) return new BodyLiteral(formType,A);}
        break;
      case VAR:
        k = jj_consume_token(VAR);
                        {if (true) return new BodyLiteral(formType,new VarTerm(k.image));}
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_TRUE:
      case TK_FALSE:
      case TK_NEG:
      case NUMBER:
      case STRING:
      case ATOM:
      case VAR:
      case 26:
      case 31:
        // actions or expressions
          rel = re();
                        if (rel.isVar()) {
                          {if (true) return new BodyLiteral(formType, (VarTerm)rel);} // the action is the Var content
                        } else if (rel.isLiteral()) {
                          {if (true) return new BodyLiteral(formType, (Literal)rel);}
                        } else {
                          {if (true) return new BodyLiteral(formType, new Literal(rel));}
                        }
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

/* Annotated Atomic Formulae */
  final public Pred at() throws ParseException {
                      Token K; Pred p = new Pred(); Term t; List l;
    K = jj_consume_token(ATOM);
                      p.setFunctor(K.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      jj_consume_token(31);
      l = lt();
      jj_consume_token(32);
                      p.addTerms(l);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 33:
      jj_consume_token(33);
      l = lt();
      jj_consume_token(34);
                      p.addAnnots(l);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

/* List of terms */
  final public List lt() throws ParseException {
                      List listTerms = new ArrayList(); Term v;
    v = t();
                      listTerms.add(v);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 35:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_3;
      }
      jj_consume_token(35);
      v = t();
                      listTerms.add(v);
    }
                      {if (true) return listTerms;}
    throw new Error("Missing return statement in function");
  }

  final public Term t() throws ParseException {
                     Token K; Term u; NumberTerm nb;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case ATOM:
      u = l();
                     {if (true) return u;}
      break;
    case 33:
      u = list();
                     {if (true) return u;}
      break;
    case NUMBER:
    case VAR:
    case 26:
    case 31:
      nb = ae();
                     {if (true) return (Term)nb;}
      break;
    case STRING:
      K = jj_consume_token(STRING);
                     {if (true) return new StringTerm(K.image.replaceAll("\"", "\\\""));}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ListTerm list() throws ParseException {
                    ListTerm lt = new ListTerm(); ListTerm last; Token K; Term f;
    jj_consume_token(33);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case NUMBER:
    case STRING:
    case ATOM:
    case VAR:
    case 26:
    case 31:
    case 33:
      f = t();
                        last = lt.add(f);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 35:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_4;
        }
        jj_consume_token(35);
        f = t();
                        last = last.add(f);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 36:
        jj_consume_token(36);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
          K = jj_consume_token(VAR);
                        last.setTail(new VarTerm(K.image));
          break;
        case 33:
          f = list();
                        last = last.concat((ListTerm)f);
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(34);
                        {if (true) return lt;}
    throw new Error("Missing return statement in function");
  }

/* relational expression 
   used in context and body
   
     <VAR>      [ <OPREL> <EXP> ]  --> this method returns the VarTerm
   | <LITERAL>  [ <OPREL> <EXP> ]  --> returns the Literal
   | <EXP> <OPREL> <EXP>           --> returns a Term like .gt(<Term>,<Term>)
*/
  final public Term re() throws ParseException {
                                            Token k;
                                             Term op1 = null;
                                             Term op2 = null;
                                             NumberTerm nb;
                                             String operator = "";
                                             boolean change = false;
                                             Term rel = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
    case VAR:
    case 26:
    case 31:
      nb = ae();
                                             op1 = (Term)nb;
      break;
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case ATOM:
      op1 = l();
      break;
    case STRING:
      k = jj_consume_token(STRING);
                                             op1 = new StringTerm(k.image);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 37:
        jj_consume_token(37);
                                             operator = ".gt"; change = true;
        break;
      case 38:
        jj_consume_token(38);
                                             operator = ".gte"; change = true;
        break;
      case 39:
        jj_consume_token(39);
                                             operator = ".gt";
        break;
      case 40:
        jj_consume_token(40);
                                             operator = ".gte";
        break;
      case 41:
        jj_consume_token(41);
                                             operator = ".equals";
        break;
      case 42:
        jj_consume_token(42);
                                             operator = ".notequals";
        break;
      case 43:
        jj_consume_token(43);
                                             operator = ".unifies";
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case VAR:
      case 26:
      case 31:
        nb = ae();
                                             op2 = (Term)nb;
        break;
      case TK_TRUE:
      case TK_FALSE:
      case TK_NEG:
      case ATOM:
        op2 = l();
        break;
      case STRING:
        k = jj_consume_token(STRING);
                                             op2 = new StringTerm(k.image);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                             rel = new Term(operator);
                                             if (!change) {
                                                 rel.addTerm(op1);
                                                 rel.addTerm(op2);
                                                          } else {
                                                 rel.addTerm(op2);
                                                 rel.addTerm(op1);
                                             }
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
                                             if (rel == null && !op1.isVar() && !op1.isLiteral()) {
                                                {if (true) throw new ParseException("RelExp: second operand expected");}
                                             }
                                             if (rel != null) {
                                                {if (true) return rel;}
                                             } else { // op1 is a Var or Literal
                                                {if (true) return op1;}
                                             }
    throw new Error("Missing return statement in function");
  }

/* arithmetic expression */
  final public NumberTerm ae() throws ParseException {
                       NumberTerm t1, t2; int op;
    t1 = trm();
                       op = -1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 25:
    case 26:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
        jj_consume_token(25);
                       op = ExprTerm.EOplus;
        break;
      case 26:
        jj_consume_token(26);
                       op = ExprTerm.EOminus;
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = ae();
                       {if (true) return new ExprTerm(t1,op,t2);}
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
                       {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public NumberTerm trm() throws ParseException {
                      NumberTerm t1, t2; int op;
    t1 = factor();
                      op = -1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 44:
    case 45:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 44:
        jj_consume_token(44);
                      op = ExprTerm.EOtimes;
        break;
      case 45:
        jj_consume_token(45);
                      op = ExprTerm.EOdiv;
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = trm();
                      {if (true) return new ExprTerm(t1,op,t2);}
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
                      {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public NumberTerm factor() throws ParseException {
                      NumberTerm t1, t2; int op;
    t1 = simple();
                      op = -1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 46:
    case 47:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 46:
        jj_consume_token(46);
                      op = ExprTerm.EOmod;
        break;
      case 47:
        jj_consume_token(47);
                      op = ExprTerm.EOpow;
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = factor();
                      {if (true) return new ExprTerm(t1,op,t2);}
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
                      {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public NumberTerm simple() throws ParseException {
                      Token K; NumberTerm t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      K = jj_consume_token(NUMBER);
                      {if (true) return new NumberTermImpl(K.image);}
      break;
    case VAR:
      K = jj_consume_token(VAR);
                      {if (true) return new VarTerm(K.image);}
      break;
    case 26:
      jj_consume_token(26);
      t = simple();
                      {if (true) return new ExprTerm(ExprTerm.EOminus, t);}
      break;
    case 31:
      jj_consume_token(31);
      t = ae();
      jj_consume_token(32);
                      {if (true) return t;}
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_3R_28() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_scan_token(33)) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_9() {
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_8() {
    if (jj_scan_token(26)) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3R_7() {
    if (jj_scan_token(25)) return true;
    return false;
  }

  final private boolean jj_3R_6() {
    if (jj_scan_token(28)) return true;
    return false;
  }

  final private boolean jj_3R_5() {
    if (jj_scan_token(27)) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_5()) {
    jj_scanpos = xsp;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) return true;
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) return true;
    }
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_scan_token(33)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_scan_token(TK_FALSE)) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_scan_token(TK_TRUE)) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_scan_token(TK_NEG)) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_scan_token(31)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_scan_token(31)) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(26)) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  final private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_scan_token(ATOM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    }
    }
    return false;
  }

  public as2jTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[33];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x8580,0x6000800,0x800,0x6000000,0x18000000,0x18000000,0x400,0x8580,0x20000000,0x200,0x40000000,0x1e000000,0x18580,0x8401d580,0x80000000,0x0,0x0,0x8401d580,0x0,0x10000,0x0,0x8401d580,0x8401d580,0x0,0x8401d580,0x0,0x6000000,0x6000000,0x0,0x0,0x0,0x0,0x84011000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x8,0x2,0x8,0x2,0x10,0x2,0x0,0xfe0,0x0,0xfe0,0x0,0x0,0x3000,0x3000,0xc000,0xc000,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public as2j(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new as2jTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public as2j(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new as2jTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public as2j(as2jTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(as2jTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[48];
    for (int i = 0; i < 48; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 33; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }

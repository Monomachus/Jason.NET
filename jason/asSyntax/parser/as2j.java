/* Generated By:JavaCC: Do not edit this line. as2j.java */
  package jason.asSyntax.parser;

  import java.util.*;
  import java.io.*;
  import jason.asSyntax.*;
  import jason.asSemantics.Agent;
  import jason.D;

  public class as2j implements as2jConstants {

    private String name;
    private File source = null;

    private PrintStream out = System.out;

    // Run the parser
    public static void main ( String args[] ) {
      as2j parser;

      if(args.length==1) {
        String name = args[0];
                try {
                  parser = new as2j(new java.io.FileInputStream(name+".asl"));
                  parser.setName(name);
                }
                catch(java.io.FileNotFoundException e){
                  System.err.println("as2j: file \"" + name + ".asl\" not found.");
                  return ;
        }
        System.out.println("as2j: Creating Jason agent for \"" + name + ".asl\" ..." );
                try {
           parser.bs(); // just to let the user know in advance there is ...
           parser.ps(); // ... any syntax error. Can't use ag() as there isn't an agent to create.
                }
        catch (Exception e) {
          System.err.println("as2j: parsing error in file \"" + name + ".asl\"\n" + e );
          System.err.println("as2j: generating java files anyway.");
        }
      }
      else {
                System.err.println("as2j: usage must be:");
                System.err.println("      java as2j <AgentName>");
                System.err.println("         Input from <AgentName>.asl");
                System.err.println("         Output to file Agent_<AgentName>.java");
        return ;
      }
    }

    /* Auxiliary Functions */

    void setName(String n) {
        name = n;
    }

    void setSource(File f) {
        source = f;
    }

/* AgentSpeak Grammar */
  final public void ag(Agent a) throws ParseException {
                     BeliefBase bb; PlanLibrary pp;
    bb = bs();
              a.addBS(bb);
    pp = ps();
              a.addPS(pp);
  }

  final public BeliefBase bs() throws ParseException {
                    BeliefBase bb = new BeliefBase(); Literal F;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_TRUE:
      case TK_NEG:
      case ATOM:
      case VAR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      F = l();
      jj_consume_token(21);
                     if(!F.isGround()) {
                                         {if (true) throw new ParseException("Error: Initial belief must be ground!\n       Cannot use "+F+" as initial belief.");}
                  }
    // NB: initial beliefs are as percepts (not internal) by default!!!
    F.addAnnot(D.TSelf);
    bb.add(F);
    }
    {if (true) return bb;}
    throw new Error("Missing return statement in function");
  }

  final public PlanLibrary ps() throws ParseException {
                     PlanLibrary pp = new PlanLibrary(); Plan pl;
    label_2:
    while (true) {
      pl = p();
               pp.add(pl);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 22:
      case 25:
      case 26:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
    }
    {if (true) return pp;}
    throw new Error("Missing return statement in function");
  }

  final public Plan p() throws ParseException {
             Trigger T; ArrayList C; ArrayList H; Pred L = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 22:
      jj_consume_token(22);
      L = at();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    T = te();
    jj_consume_token(23);
    C = ct();
    jj_consume_token(24);
    H = h();
    jj_consume_token(21);
                                   {if (true) return new Plan(L,T,C,H);}
    throw new Error("Missing return statement in function");
  }

  final public Trigger te() throws ParseException {
                 boolean teType;
                             byte    teGoal = D.TEBel;
                                 Literal F;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 25:
      jj_consume_token(25);
             teType = D.TEAdd;
      break;
    case 26:
      jj_consume_token(26);
             teType = D.TEDel;
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 27:
    case 28:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 27:
        jj_consume_token(27);
             teGoal = D.TEAchvG;
        break;
      case 28:
        jj_consume_token(28);
             teGoal = D.TETestG;
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    F = l();
             {if (true) return new Trigger(teType,teGoal,F);}
    throw new Error("Missing return statement in function");
  }

  final public Literal l() throws ParseException {
                Pred F; Token k; boolean type = D.LPos;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_NEG:
    case ATOM:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_NEG:
        jj_consume_token(TK_NEG);
                                type = D.LNeg;
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      F = at();
                                {if (true) return new Literal(type,F);}
      break;
    case VAR:
      k = jj_consume_token(VAR);
                                {if (true) return new Literal(type,new Pred(k.image));}
      break;
    case TK_TRUE:
      k = jj_consume_token(TK_TRUE);
                                {if (true) return D.LTrue;}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ArrayList ct() throws ParseException {
                    DefaultLiteral P; ArrayList C = new ArrayList(); List CT;
    //( <TK_TRUE>   { return C; } TODO a literal may be true
         //| 
         P = dl();
                  if (!P.equals(D.LTrue)) {
                    C.add(P);
                  }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 29:
      jj_consume_token(29);
      CT = ct();
                    C.addAll(CT);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
     {if (true) return C;}
    throw new Error("Missing return statement in function");
  }

  final public DefaultLiteral dl() throws ParseException {
                        Literal L;
                        Term op1 = null;
                        String operator = "";
                        Term op2 = null;
                        boolean change = false;
                        boolean isPos = D.LDefPos;
                        DefaultLiteral rel;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_NOT:
      jj_consume_token(TK_NOT);
                       isPos = D.LDefNeg;
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 30:
      jj_consume_token(30);
      L = dl();
      jj_consume_token(31);
                       {if (true) return new DefaultLiteral(isPos,L);}
      break;
    case TK_TRUE:
    case TK_NEG:
    case NUMBER:
    case STRING:
    case ATOM:
    case VAR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_TRUE:
      case TK_NEG:
      case ATOM:
      case VAR:
        op1 = l();
                       rel = new DefaultLiteral(isPos,(Literal)op1);
        break;
      case NUMBER:
      case STRING:
        op1 = value();
                       rel = null;
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 32:
          jj_consume_token(32);
                       operator = ".gt"; change = true;
          break;
        case 33:
          jj_consume_token(33);
                       operator = ".gte"; change = true;
          break;
        case 34:
          jj_consume_token(34);
                       operator = ".gt";
          break;
        case 35:
          jj_consume_token(35);
                       operator = ".gte";
          break;
        case 36:
          jj_consume_token(36);
                       operator = ".equals";
          break;
        case 37:
          jj_consume_token(37);
                       operator = ".equals"; isPos = !isPos;
          break;
        case 38:
          jj_consume_token(38);
                       operator = ".unifies";
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                       if (rel != null && operator.startsWith(".gt")) { // op1 is a l()
                          if (! op1.isVar()) {
                                                {if (true) throw new ParseException("Default literal: literal must not be followed by relational operator.");}
                          }
                       }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TK_TRUE:
        case TK_NEG:
        case ATOM:
        case VAR:
          op2 = l();
          break;
        case NUMBER:
        case STRING:
          op2 = value();
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                       rel = new DefaultLiteral(isPos, new Literal(true, new Pred(operator)));
                       if (!change) {
                                              rel.addTerm(op1);
                                              rel.addTerm(op2);
                                           } else {
                                              rel.addTerm(op2);
                                              rel.addTerm(op1);
                                           }
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      if (rel == null) {
        {if (true) throw new ParseException("Default literal: value must be followed by relational operator.");}
      } else {
         {if (true) return rel;}
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Term value() throws ParseException {
                 Token k;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      k = jj_consume_token(NUMBER);
                         {if (true) return new Term(k.image);}
      break;
    case STRING:
      k = jj_consume_token(STRING);
                         {if (true) return new Term(k.image);}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// not used! use bd instead
  final public ArrayList h() throws ParseException {
                  ArrayList H;
    //<TK_TRUE> { return new ArrayList(); } TODO: 
      //| 
      H = bd();
    {if (true) return H;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList bd() throws ParseException {
                   BodyLiteral F;
                   ArrayList BD = new ArrayList();
                   List BD2;
    F = f();
                   if (! F.equalsAsLiteral(D.LTrue)) {
                      BD.add(F);
                   }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 39:
      jj_consume_token(39);
      BD2 = bd();
                   BD.addAll(BD2);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
                   {if (true) return BD;}
    throw new Error("Missing return statement in function");
  }

  final public BodyLiteral f() throws ParseException {
                    Literal A;
                    byte formType = D.HAction;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 25:
    case 26:
    case 27:
    case 28:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 27:
        jj_consume_token(27);
             formType = D.HAchieve;
        break;
      case 28:
        jj_consume_token(28);
             formType = D.HTest;
        break;
      case 25:
        jj_consume_token(25);
             formType = D.HAddBel;
        break;
      case 26:
        jj_consume_token(26);
             formType = D.HDelBel;
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    A = l();
             {if (true) return new BodyLiteral(formType,A);}
    throw new Error("Missing return statement in function");
  }

/* Annotated Atomic Formulae */
  final public Pred at() throws ParseException {
              Token K; Pred p = new Pred(); Term t;
    K = jj_consume_token(ATOM);
             p.setFunctor(K.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 30:
      jj_consume_token(30);
      lt(p);
      jj_consume_token(31);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 40:
      jj_consume_token(40);
      la(p);
      jj_consume_token(41);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

/* Structures (no annotations here) */
// not used!
  final public Term st() throws ParseException {
              Token K; Term t = new Term();
    K = jj_consume_token(ATOM);
               t.setFunctor(K.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 30:
      jj_consume_token(30);
      t = lt(t);
      jj_consume_token(31);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

/* List of terms as parameters */
  final public Term lt(Term u) throws ParseException {
                    Term v;
    v = t();
                u.addTerm(v);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_3;
      }
      jj_consume_token(42);
      v = t();
                u.addTerm(v);
    }
    {if (true) return u;}
    throw new Error("Missing return statement in function");
  }

/* List of terms as annotations */
  final public Pred la(Pred p) throws ParseException {
                    Term v;
    v = t();
                // by Jomi: this check is moved to addBel. Since we can unify annots
                // if(!v.isGround()) {
                //  throw new ParseException("Error: Annotations must be ground!\n       Cannot use "+v+" as annotation.");
                //}
                p.addAnnot(v);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_4;
      }
      jj_consume_token(42);
      v = t();
                //if(!v.isGround()) {
                //  throw new ParseException("Error: Annotations must be ground!\n       Cannot use "+v+" as annotation.");
                //}
                p.addAnnot(v);
    }
       {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public Term t() throws ParseException {
             Token K; Term u;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_TRUE:
    case TK_NEG:
    case ATOM:
    case VAR:
      //u=st()       { return u; } TODO: changed to at, is it ok? used in the terms of received(...Content...)
        u = l();
                  {if (true) return u;}
      break;
    case 40:
      u = list();
                   {if (true) return u;}
      break;
    case NUMBER:
      K = jj_consume_token(NUMBER);
                   {if (true) return new Term(K.image);}
      break;
    case STRING:
      K = jj_consume_token(STRING);
                   {if (true) return new Term(K.image.replaceAll("\"", "\\\""));}
      break;
    case TK_FALSE:
      K = jj_consume_token(TK_FALSE);
                   {if (true) return new Term(K.image);}
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Term list() throws ParseException {
                Token K; Term f; Term p = new Term(); Term l; Term a;
    jj_consume_token(40);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case NUMBER:
    case STRING:
    case ATOM:
    case VAR:
    case 40:
      f = t();
            p.setFunctor(D.ListCons); p.addTerm(f); a=p;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 41:
      case 42:
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 42:
            ;
            break;
          default:
            jj_la1[25] = jj_gen;
            break label_5;
          }
          jj_consume_token(42);
          f = t();
                    l=new Term(D.ListCons); a.addTerm(l); a=l; a.addTerm(f);
        }
        jj_consume_token(41);
            a.addTerm(new Term(D.EmptyList)); {if (true) return p;}
        break;
      case 43:
        jj_consume_token(43);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 40:
          l = list();
          jj_consume_token(41);
                       p.addTerm(l); {if (true) return p;}
          break;
        case VAR:
          K = jj_consume_token(VAR);
          jj_consume_token(41);
                       p.addTerm(new Term(K.image)); {if (true) return p;}
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case 41:
      jj_consume_token(41);
          p.setFunctor(D.EmptyList); {if (true) return p;}
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  public as2jTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0xc480,0x6400000,0x400000,0x6000000,0x18000000,0x18000000,0x400,0xc480,0x20000000,0x200,0xec80,0x0,0xec80,0x0,0x4000ec80,0x2800,0x0,0x1e000000,0x1e000000,0x40000000,0x0,0x40000000,0x0,0x0,0xed80,0x0,0x8000,0x0,0xed80,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7f,0x0,0x7f,0x0,0x0,0x80,0x0,0x0,0x0,0x100,0x0,0x400,0x400,0x100,0x400,0x100,0xe00,0x300,};
   }

  public as2j(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new as2jTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  public as2j(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new as2jTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  public as2j(as2jTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  public void ReInit(as2jTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[44];
    for (int i = 0; i < 44; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 29; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 44; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  }

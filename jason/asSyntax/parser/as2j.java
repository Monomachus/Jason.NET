/* Generated By:JavaCC: Do not edit this line. as2j.java */
  package jason.asSyntax.parser;

  import java.util.*;
  import java.io.*;
  import java.util.logging.*;

  import jason.*;
  import jason.asSemantics.*;
  import jason.bb.*;
  import jason.asSyntax.*;
  import jason.asSyntax.directives.*;
  import jason.asSyntax.ArithExpr.ArithmeticOp;
  import jason.asSyntax.LogExpr.LogicalOp;
  import jason.asSyntax.RelExpr.RelationalOp;
  import jason.asSyntax.BodyLiteral.BodyType;
  import jason.asSyntax.Trigger.TEOperator;
  import jason.asSyntax.Trigger.TEType;
  import jason.jeditplugin.*;

  public class as2j implements as2jConstants {
    private String asSource = null;
    private Agent  curAg    = null;

    private static Logger logger = Logger.getLogger("aslparser");
    private static Set<String> parsedFiles = new HashSet<String>();
    private static Config config = Config.get();

    public void setAg(Agent ag) { curAg = ag; }
    private String getSourceRef(Object o) {
        if (o instanceof SourceInfo) {
           SourceInfo s = (SourceInfo)o;
           return "["+s.getSrc()+":"+s.getBeginSrcLine()+"]";
        } else {
           return "";
        }
    }
        private InternalActionLiteral checkInternalActionsInContext(LogicalFormula f, Agent ag) throws Exception {
            if (f != null) {
                if (f instanceof InternalActionLiteral) {
                    InternalActionLiteral ial = (InternalActionLiteral)f;
                    if (! ial.getIA(ag).canBeUsedInContext())
                       return ial;
                } else if (f instanceof LogExpr) {
                    LogExpr le = (LogExpr)f;
                    InternalActionLiteral ial = checkInternalActionsInContext(le.getLHS(), ag);
                    if (ial != null)
                        return ial;
                    if (!le.isUnary())
                        return checkInternalActionsInContext(le.getRHS(), ag);
                }
        }
        return null;
    }

/* AgentSpeak Grammar */

/*   agent ::= bels goals plans

     returns true if achieved the end of file
     returns false if achieved a "{ end }" directive  
*/
  final public boolean agent(Agent a) throws ParseException, jason.JasonException {
                                Literal b;
                                Literal g;
                                Plan    p;
                                curAg = a;
                                if (a != null) asSource = a.getASLSrc();
                                boolean endDir = false;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 27:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      endDir = directive(a);
                                if (endDir) {if (true) return false;}
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_TRUE:
      case TK_FALSE:
      case TK_NEG:
      case TK_BEGIN:
      case TK_END:
      case ATOM:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      b = belief();
                                if (a != null) a.addInitialBel(b);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 27:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        endDir = directive(a);
                                if (endDir) {if (true) return false;}
      }
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 31:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      g = initial_goal();
                                if (a != null) a.addInitialGoal(g);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 27:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_5;
        }
        endDir = directive(a);
                                if (endDir) {if (true) return false;}
      }
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_LABEL_AT:
      case 34:
      case 35:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_6;
      }
      p = plan();
                                if (a != null) {
                                   a.getPL().add(p);
                                   // warning only not parsed files
                                   if (config.getBoolean(Config.WARN_SING_VAR) && !parsedFiles.contains(asSource)) {
                                      List<VarTerm> singletonVars = p.getSingletonVars();
                                      if (singletonVars.size() > 0) {
                                         logger.warning(getSourceRef(p)+" warning: the plan for event '"+p.getTrigger()+"' has the following singleton variables: "+singletonVars);
                                      }
                                   }
                                }
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TK_TRUE:
        case TK_FALSE:
        case TK_NEG:
        case TK_BEGIN:
        case TK_END:
        case ATOM:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_7;
        }
        b = belief();
                                if (a != null) {
                                  if (b.isRule()) {
                                      a.addInitialBel(b);
                                      if (!parsedFiles.contains(asSource))
                                         logger.warning(getSourceRef(b)+" warning: avoid to mix rules and plans ('"+b+"').");
                                  } else {
                                      {if (true) throw new ParseException(getSourceRef(b)+" The belief '"+b+"' is not in the begin of the source code!");}
                                  }
                                }
      }
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 27:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_8;
        }
        endDir = directive(a);
                                if (endDir) {if (true) return false;}
      }
    }
    jj_consume_token(0);
                                if (a != null) parsedFiles.add(a.getASLSrc());
                                {if (true) return true;}
    throw new Error("Missing return statement in function");
  }

/* Directive 

   returns true if the directive is "{ end }", false otherwise
*/
  final public boolean directive(Agent outerAg) throws ParseException, jason.JasonException {
                                Pred dir = null;
                                Agent resultOfDirective = null;
                                boolean isEOF = false;
    if (jj_2_1(4)) {
      jj_consume_token(27);
      jj_consume_token(TK_BEGIN);
      dir = pred();
      jj_consume_token(28);
                                Agent innerAg = new Agent();
      isEOF = agent(innerAg);
                                if (isEOF)
                                   {if (true) throw new ParseException(getSourceRef(dir)+" The directive '{ begin "+dir+"}' does not end with '{ end }'.");}
                                else
                                   resultOfDirective = DirectiveProcessor.process(dir, outerAg, innerAg);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 27:
        jj_consume_token(27);
        dir = pred();
        jj_consume_token(28);
                                if (dir.toString().equals("end"))
                                   {if (true) return true;}
                                else
                                   resultOfDirective = DirectiveProcessor.process(dir, outerAg, null);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                                if (resultOfDirective != null && outerAg != null) {
                                  // import bels, plans and initial goals from agent resultOfDirective
                                  outerAg.importComponents(resultOfDirective);
                                }
                                {if (true) return false;}
    throw new Error("Missing return statement in function");
  }

/* Beliefs & Rules */
  final public Literal belief() throws ParseException {
                     Literal h; Object t;
    h = literal();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 29:
      jj_consume_token(29);
      t = log_expr();
                               h = new Rule(h,(LogicalFormula)t);
                               // warning only not parsed files
                               if (config.getBoolean(Config.WARN_SING_VAR) && !parsedFiles.contains(asSource)) {
                                  List<VarTerm> singletonVars = h.getSingletonVars();
                                  if (singletonVars.size() > 0) {
                                     logger.warning(getSourceRef(h)+" warning: the rule with head '"+((Rule)h).headClone()+"' has the following singleton variables: "+singletonVars);
                                  }
                               }
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(30);
                               {if (true) return h;}
    throw new Error("Missing return statement in function");
  }

/* Initial goals */
  final public Literal initial_goal() throws ParseException {
                           Literal g;
    jj_consume_token(31);
    g = literal();
    jj_consume_token(30);
                           {if (true) return g;}
    throw new Error("Missing return statement in function");
  }

/* Plan */
  final public Plan plan() throws ParseException {
                        Token k; Pred L = null;
                        Trigger T; Object C = null;
                        ArrayList B = new ArrayList();
                        int start = -1, end;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_LABEL_AT:
      k = jj_consume_token(TK_LABEL_AT);
      L = pred();
                                    start = k.beginLine;
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    T = trigger();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 32:
      k = jj_consume_token(32);
      C = log_expr();
                                   if (start == -1) start = k.beginLine;
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 33:
      k = jj_consume_token(33);
      plan_body(B);
                                   if (start == -1) start = k.beginLine;
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    k = jj_consume_token(30);
                                   if (start == -1) start = k.beginLine;
                     end = k.beginLine;
                     InternalActionLiteral ial = null;
                     try { ial = checkInternalActionsInContext((LogicalFormula)C, curAg); } catch (Exception e) {}
                     if (ial != null)
                        {if (true) throw new ParseException(getSourceRef(ial)+" The internal action '"+ial+"' can not be used in plan's context!");}
                     Plan p = new Plan(L,T,(LogicalFormula)C,B);
                     p.setSrcLines(start,end);
                     p.setSrc(asSource);
                     {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

/* Trigger */
  final public Trigger trigger() throws ParseException {
                        TEOperator teOp;
                                TEType     teType = TEType.belief;
                                        Literal F;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 34:
      jj_consume_token(34);
                 teOp = TEOperator.add;
      break;
    case 35:
      jj_consume_token(35);
                 teOp = TEOperator.del;
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
    case 36:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 31:
        jj_consume_token(31);
                 teType = TEType.achieve;
        break;
      case 36:
        jj_consume_token(36);
                 teType = TEType.test;
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case ATOM:
      F = literal();
      break;
    case VAR:
    case UNNAMEDVAR:
      F = var();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                 {if (true) return new Trigger(teOp,teType,F);}
    throw new Error("Missing return statement in function");
  }

/* Literal */
  final public Literal literal() throws ParseException {
                       Pred F; Token k; boolean type = Literal.LPos;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case ATOM:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_NEG:
        jj_consume_token(TK_NEG);
                                type = Literal.LNeg;
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      F = pred();
                                if (F.getFunctor().indexOf(".") >= 0) {
                                                                   try {
                                                                      {if (true) return new InternalActionLiteral(F, curAg);}
                                   } catch (Exception e) {
                                      {if (true) throw new ParseException(getSourceRef(F)+" The internal action class for '"+F+"' was not found!");}
                                   }
                                }
                                if (F.isAtom() && type == Literal.LPos) {
                                   Atom a = new Atom(F.getFunctor());
                                   a.setSrc(F);
                                   {if (true) return a;}
                                }
                                {if (true) return new Literal(type,F);}
      break;
    case TK_TRUE:
      k = jj_consume_token(TK_TRUE);
                                {if (true) return Literal.LTrue;}
      break;
    case TK_FALSE:
      k = jj_consume_token(TK_FALSE);
                                {if (true) return Literal.LFalse;}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* Plan body */
  final public void plan_body(ArrayList bd) throws ParseException {
                                 BodyLiteral F;
    F = body_formula();
                             if (! F.getLogicalFormula().equals(Literal.LTrue)) {
                               bd.add(F);
                             }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 37:
      jj_consume_token(37);
      plan_body(bd);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
  }

  final public BodyLiteral body_formula() throws ParseException {
                                Literal A; Token k;
                                BodyType formType = BodyType.action;
                                Object L;
                                Object rel; VarTerm v;
    if (jj_2_2(4)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 31:
        jj_consume_token(31);
                         formType = BodyType.achieve;
        break;
      case 38:
        jj_consume_token(38);
                         formType = BodyType.achieveNF;
        break;
      case 36:
        jj_consume_token(36);
                         formType = BodyType.test;
        break;
      case 34:
        jj_consume_token(34);
                         formType = BodyType.addBel;
        break;
      case 35:
        jj_consume_token(35);
                         formType = BodyType.delBel;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 34:
          jj_consume_token(34);
                         formType = BodyType.delAddBel;
          break;
        default:
          jj_la1[20] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_TRUE:
      case TK_FALSE:
      case TK_NEG:
      case TK_BEGIN:
      case TK_END:
      case ATOM:
        A = literal();
                         {if (true) return new BodyLiteral(formType,A);}
        break;
      case VAR:
      case UNNAMEDVAR:
        v = var();
                         {if (true) return new BodyLiteral(formType,v);}
        break;
      case 39:
        jj_consume_token(39);
        L = log_expr();
        jj_consume_token(40);
                         if (formType == BodyType.test) {
                            if (L instanceof LogicalFormula)
                               {if (true) return new BodyLiteral(BodyType.test, (LogicalFormula)L);}  // used in ?(a & b)
                            else
                               {if (true) throw new ParseException(getSourceRef(L)+" The argument in ?(<logical formula>) is not a logical formula.");}
                         } else {
                            {if (true) throw new ParseException(getSourceRef(L)+" Constructions like (<logical formula>) are possible only for test goal: ?(<logical formula>).");}
                         }
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case TK_TRUE:
      case TK_FALSE:
      case TK_NEG:
      case TK_BEGIN:
      case TK_END:
      case NUMBER:
      case STRING:
      case ATOM:
      case UNNAMEDVAR:
      case 35:
      case 39:
        // actions or expressions
          rel = rel_expr();
                         if (rel instanceof Literal) {
                            {if (true) return new BodyLiteral(formType, (Literal)rel);} // action
                         } else if (rel instanceof RelExpr) {
                            {if (true) return new BodyLiteral(BodyType.constraint, (RelExpr)rel);} // constraint 
                         } else {
                            {if (true) throw new ParseException(getSourceRef(rel)+" A body formula should be an action or a constraint (RelExpr).");}
                         }
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

/* Annotated Formulae */
  final public Pred pred() throws ParseException {
                      Token K; Pred p; Term t; List l; ListTerm lt;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATOM:
      K = jj_consume_token(ATOM);
      break;
    case TK_BEGIN:
      K = jj_consume_token(TK_BEGIN);
      break;
    case TK_END:
      K = jj_consume_token(TK_END);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                       p = new Pred(K.image);
                       p.setSrcLine(K.beginLine);
                       p.setSrc(asSource);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 39:
      jj_consume_token(39);
      l = terms();
      jj_consume_token(40);
                       p.setTerms(l);
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
      lt = list();
                       p.setAnnots(lt);
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
                       {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

/* List of terms */
  final public List terms() throws ParseException {
                 List listTerms = new ArrayList(); Term v;
    v = term();
                         listTerms.add(v);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 41:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_9;
      }
      jj_consume_token(41);
      v = term();
                         listTerms.add(v);
    }
                         {if (true) return listTerms;}
    throw new Error("Missing return statement in function");
  }

  final public Term term() throws ParseException {
                      Term u; Object o;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
      u = list();
      break;
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case NUMBER:
    case ATOM:
    case UNNAMEDVAR:
    case 35:
    case 39:
      o = arithm_expr();
                      {if (true) return (Term)o;}
      break;
    case STRING:
      u = string();
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return u;}
    throw new Error("Missing return statement in function");
  }

  final public ListTermImpl list() throws ParseException {
                        ListTermImpl lt = new ListTermImpl(); ListTerm last;
                        Token K; Term f;
    jj_consume_token(42);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case NUMBER:
    case STRING:
    case ATOM:
    case UNNAMEDVAR:
    case 35:
    case 39:
    case 42:
      f = term();
                            last = lt.append(f); lt.setSrcLine(f.getSrcLine()); lt.setSrc(f.getSrc());
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 41:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_10;
        }
        jj_consume_token(41);
        f = term();
                            last = last.append(f);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 43:
        jj_consume_token(43);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
          K = jj_consume_token(VAR);
                            last.setNext(new VarTerm(K.image));
          break;
        case UNNAMEDVAR:
          K = jj_consume_token(UNNAMEDVAR);
                            last.setNext(new UnnamedVar(K.image));
          break;
        case 42:
          f = list();
                            last = last.concat((ListTerm)f);
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    jj_consume_token(44);
                            {if (true) return lt;}
    throw new Error("Missing return statement in function");
  }

/* logical expression */
  final public Object log_expr() throws ParseException {
                           Object t1, t2;
    t1 = log_expr_trm();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 43:
      jj_consume_token(43);
      t2 = log_expr();
                           {if (true) return new LogExpr((LogicalFormula)t1,LogicalOp.or,(LogicalFormula)t2);}
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
                           {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public Object log_expr_trm() throws ParseException {
                             Object t1, t2;
    t1 = log_expr_factor();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 45:
      jj_consume_token(45);
      t2 = log_expr_trm();
                             {if (true) return new LogExpr((LogicalFormula)t1,LogicalOp.and,(LogicalFormula)t2);}
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
                             {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public Object log_expr_factor() throws ParseException {
                                      Object t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_NOT:
      jj_consume_token(TK_NOT);
      t = log_expr_factor();
                                      {if (true) return new LogExpr(LogicalOp.not,(LogicalFormula)t);}
      break;
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case NUMBER:
    case STRING:
    case ATOM:
    case UNNAMEDVAR:
    case 35:
    case 39:
      t = rel_expr();
                                      {if (true) return t;}
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* relational expression 
   used in context, body and term
   
     <VAR>      [ <OPREL> <EXP> ]  --> this method returns the VarTerm
   | <LITERAL>  [ <OPREL> <EXP> ]  --> returns the Literal
   | <EXP>      [ <OPREL> <EXP> ]  --> returns the ExprTerm 
*/
  final public Object rel_expr() throws ParseException {
                                             Object op1 = null;
                                             Object op2 = null;
                                             RelationalOp operator = RelationalOp.none;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case NUMBER:
    case ATOM:
    case UNNAMEDVAR:
    case 35:
    case 39:
      op1 = arithm_expr();
      break;
    case STRING:
      op1 = string();
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 46:
        jj_consume_token(46);
                                             operator = RelationalOp.lt;
        break;
      case 47:
        jj_consume_token(47);
                                             operator = RelationalOp.lte;
        break;
      case 48:
        jj_consume_token(48);
                                             operator = RelationalOp.gt;
        break;
      case 49:
        jj_consume_token(49);
                                             operator = RelationalOp.gte;
        break;
      case 50:
        jj_consume_token(50);
                                             operator = RelationalOp.eq;
        break;
      case 51:
        jj_consume_token(51);
                                             operator = RelationalOp.dif;
        break;
      case 52:
        jj_consume_token(52);
                                             operator = RelationalOp.unify;
        break;
      case 53:
        jj_consume_token(53);
                                             operator = RelationalOp.literalBuilder;
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case TK_TRUE:
      case TK_FALSE:
      case TK_NEG:
      case TK_BEGIN:
      case TK_END:
      case NUMBER:
      case ATOM:
      case UNNAMEDVAR:
      case 35:
      case 39:
        op2 = arithm_expr();
        break;
      case STRING:
        op2 = string();
        break;
      case 42:
        op2 = list();
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                             {if (true) return new RelExpr((Term)op1, operator, (Term)op2);}
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
                                             {if (true) return op1;}
    throw new Error("Missing return statement in function");
  }

/* arithmetic expression */
  final public Object arithm_expr() throws ParseException {
                                Object t1, t2; ArithmeticOp op;
    t1 = arithm_expr_trm();
                                op = ArithmeticOp.none;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 34:
    case 35:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 34:
        jj_consume_token(34);
                                op = ArithmeticOp.plus;
        break;
      case 35:
        jj_consume_token(35);
                                op = ArithmeticOp.minus;
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = arithm_expr();
                                if (!(t1 instanceof NumberTerm)) {
                                   {if (true) throw new ParseException(getSourceRef(t1)+" ArithExpr: first operand '"+t1+"' is not numeric or variable.");}
                                }
                                if (!(t2 instanceof NumberTerm)) {
                                   {if (true) throw new ParseException(getSourceRef(t2)+" ArithExpr: second operand '"+t2+"' is not numeric or variable.");}
                                }
                                {if (true) return new ArithExpr((NumberTerm)t1, op, (NumberTerm)t2);}
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
                                {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public Object arithm_expr_trm() throws ParseException {
                                  Object t1, t2; ArithmeticOp op;
    t1 = arithm_expr_factor();
                                  op = ArithmeticOp.none;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_INTDIV:
    case TK_INTMOD:
    case 54:
    case 55:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 54:
        jj_consume_token(54);
                                  op = ArithmeticOp.times;
        break;
      case 55:
        jj_consume_token(55);
                                  op = ArithmeticOp.div;
        break;
      case TK_INTDIV:
        jj_consume_token(TK_INTDIV);
                                  op = ArithmeticOp.intdiv;
        break;
      case TK_INTMOD:
        jj_consume_token(TK_INTMOD);
                                  op = ArithmeticOp.mod;
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = arithm_expr_trm();
                                  if (!(t1 instanceof NumberTerm)) {
                                    {if (true) throw new ParseException(getSourceRef(t1)+" ArithTerm: first operand '"+t1+"' is not numeric or variable.");}
                                  }
                                  if (!(t2 instanceof NumberTerm)) {
                                    {if (true) throw new ParseException(getSourceRef(t2)+" ArithTerm: second operand '"+t2+"' is not numeric or variable.");}
                                  }
                                  {if (true) return new ArithExpr((NumberTerm)t1, op, (NumberTerm)t2);}
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
                                  {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public Object arithm_expr_factor() throws ParseException {
                                  Object t1, t2; ArithmeticOp op;
    t1 = arithm_expr_simple();
                                  op = ArithmeticOp.none;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 56:
      jj_consume_token(56);
                                  op = ArithmeticOp.pow;
      t2 = arithm_expr_factor();
                                  if (!(t1 instanceof NumberTerm)) {
                                    {if (true) throw new ParseException(getSourceRef(t1)+" ArithFactor: first operand '"+t1+"' is not numeric or variable.");}
                                  }
                                  if (!(t2 instanceof NumberTerm)) {
                                    {if (true) throw new ParseException(getSourceRef(t2)+" ArithFactor: second operand '"+t2+"' is not numeric or variable.");}
                                  }
                                  {if (true) return new ArithExpr((NumberTerm)t1, op, (NumberTerm)t2);}
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
                                  {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public Object arithm_expr_simple() throws ParseException {
                                  Token K; Object t; VarTerm v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      K = jj_consume_token(NUMBER);
                                  NumberTermImpl ni = new NumberTermImpl(K.image);
                                  ni.setSrcLine(K.beginLine);
                                  ni.setSrc(asSource);
                                  {if (true) return ni;}
      break;
    case 35:
      jj_consume_token(35);
      t = arithm_expr_simple();
                                  if (!(t instanceof NumberTerm)) {
                                    {if (true) throw new ParseException(getSourceRef(t)+" The argument '"+t+"' of operator '-' is not numeric or variable.");}
                                  }
                                  {if (true) return new ArithExpr(ArithmeticOp.minus, (NumberTerm)t);}
      break;
    case 39:
      jj_consume_token(39);
      t = log_expr();
      jj_consume_token(40);
                                  {if (true) return t;}
      break;
    case VAR:
    case UNNAMEDVAR:
      v = var();
                                  {if (true) return v;}
      break;
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case ATOM:
      t = function();
                                  {if (true) return t;}
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Term function() throws ParseException {
                            Literal l;
    l = literal();
                            ArithFunction af = null;
                            if (curAg != null)
                               // try to find the function in agent registry
                               af = curAg.getFunction(l.getFunctor());
                            if (af == null || !af.checkArity(l.getArity()))
                               // try global function
                               af = FunctionRegister.getFunction(l.getFunctor());
                            if (af == null || !af.checkArity(l.getArity())) {
                               {if (true) return l;}
                            } else {
                               ArithFunctionTerm at = new ArithFunctionTerm(af);
                               at.setSrc(l);
                               at.setTerms(l.getTerms());
                               at.setAgent(curAg);
                               {if (true) return at;}
                            }
    throw new Error("Missing return statement in function");
  }

  final public VarTerm var() throws ParseException {
                      Token K; VarTerm v; ListTerm lt;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      K = jj_consume_token(VAR);
                      v = new VarTerm(K.image); v.setSrcLine(K.beginLine); v.setSrc(asSource);
      break;
    case UNNAMEDVAR:
      K = jj_consume_token(UNNAMEDVAR);
                      v = new UnnamedVar(K.image);
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
      lt = list();
                      v.setAnnots(lt);
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
                      {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public StringTerm string() throws ParseException {
                      Token k; StringTermImpl s;
    k = jj_consume_token(STRING);
                      s = new StringTermImpl(k.image.substring(1,k.image.length()-1));
                      s.setSrcLine(k.beginLine);
                      s.setSrc(asSource);
                      {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_3R_67() {
    if (jj_scan_token(56)) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_3R_66()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_scan_token(39)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(40)) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_scan_token(34)) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_scan_token(35)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_scan_token(34)) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_scan_token(36)) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_scan_token(38)) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_scan_token(31)) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_scan_token(TK_INTMOD)) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_scan_token(TK_INTDIV)) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_scan_token(55)) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_scan_token(54)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_3R_62()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_scan_token(35)) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_scan_token(34)) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_3R_60()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_scan_token(TK_FALSE)) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_scan_token(TK_TRUE)) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(53)) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(52)) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(51)) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(50)) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(49)) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(48)) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(47)) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_scan_token(46)) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_scan_token(TK_NEG)) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_49()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_scan_token(TK_NOT)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_scan_token(45)) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_3R_36()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_scan_token(43)) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_3R_33()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_scan_token(42)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_scan_token(UNNAMEDVAR)) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_32()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_scan_token(39)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(27)) return true;
    if (jj_scan_token(TK_BEGIN)) return true;
    if (jj_3R_11()) return true;
    if (jj_scan_token(28)) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_scan_token(39)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_scan_token(35)) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_20()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    }
    }
    }
    }
    return false;
  }

  public as2jTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[48];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x8000000,0x10cb00,0x8000000,0x80000000,0x8000000,0x10000,0x10cb00,0x8000000,0x8000000,0x20000000,0x10000,0x0,0x0,0x0,0x80000000,0x80000000,0x30cb80,0x800,0x10cb00,0x0,0x0,0x80000000,0x30cb80,0x3acb80,0x10c000,0x0,0x0,0x0,0x3acb80,0x0,0x200080,0x0,0x3acb80,0x0,0x0,0x3acf80,0x3acb80,0x0,0x3acb80,0x0,0x0,0x0,0x3000,0x3000,0x0,0x32cb80,0x200080,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0xc,0x0,0x0,0x0,0x0,0x0,0x1,0x2,0xc,0x10,0x10,0x0,0x0,0x0,0x20,0x4,0x5c,0x80,0x88,0x0,0x80,0x400,0x200,0x488,0x200,0x400,0x800,0x488,0x800,0x2000,0x88,0x88,0x3fc000,0x488,0x3fc000,0xc,0xc,0xc00000,0xc00000,0x1000000,0x88,0x0,0x400,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public as2j(java.io.InputStream stream) {
     this(stream, null);
  }
  public as2j(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new as2jTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public as2j(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new as2jTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public as2j(as2jTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(as2jTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[57];
    for (int i = 0; i < 57; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 48; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 57; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }

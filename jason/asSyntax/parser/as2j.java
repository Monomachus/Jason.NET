/* Generated By:JavaCC: Do not edit this line. as2j.java */
  package jason.asSyntax.parser;

  import java.util.*;
  import java.io.*;
  import jason.asSyntax.*;
  import jason.asSyntax.directives.*;
  import jason.asSemantics.*;
  import jason.bb.*;
  import jason.*;
  import jason.asSyntax.ArithExpr.ArithmeticOp;
  import jason.asSyntax.LogExpr.LogicalOp;
  import jason.asSyntax.RelExpr.RelationalOp;
  import jason.asSyntax.BodyLiteral.BodyType;

  public class as2j implements as2jConstants {

    private String name;
    private File source = null;

    private PrintStream out = System.out;

    /* Auxiliary Functions */

    void setName(String n) {
        name = n;
    }

    void setSource(File f) {
        source = f;
    }

/* AgentSpeak Grammar */
  final public void agent(Agent a) throws ParseException {
                        List bbl = new LinkedList(); PlanLibrary pp;
    belief_base(bbl);
    initial_goals(a);
    pp = plan_base(bbl);
    jj_consume_token(0);
                if (a != null) {
                  try {
                    a.getPL().addAll(pp);

                    // add beliefs (when the plans are loaded, so the events are relevant
                    Iterator i = bbl.iterator();
                    while (i.hasNext()) {
                           a.addBel((Literal)i.next());
                    }
                  } catch (JasonException je) {
                     System.err.println("Error:"+je);
                  }
                }
  }

/* Beliefs & Rules */
  final public void belief_base(List bbl) throws ParseException {
                               Literal h; Object t;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_TRUE:
      case TK_FALSE:
      case TK_NEG:
      case ATOM:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      h = literal();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
        jj_consume_token(25);
        t = log_expr();
                               h = new Rule(h,(LogicalFormula)t);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(26);
                               bbl.add(h);
    }
  }

/* Initial goals */
  final public void initial_goals(Agent a) throws ParseException {
                                Literal g;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 27:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(27);
      g = literal();
      jj_consume_token(26);
                       if (a != null && a.getTS() != null) {
                                          a.getTS().getC().addAchvGoal(g,Intention.EmptyInt);
                       }
    }
  }

/* Plans */
  final public PlanLibrary plan_base(List bbl) throws ParseException {
                                    PlanLibrary pp = new PlanLibrary();
                                    Plan pl;
                                    Pred dir;
                                    Pred lastBegin = null;
                                    List plansForDirective = null;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_LABEL_AT:
      case 28:
      case 32:
      case 33:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_LABEL_AT:
      case 32:
      case 33:
        pl = plan();
                     try {
                       if (lastBegin == null) {
                          pp.add(pl);
                       } else {
                          plansForDirective.add(pl);
                       }
                     } catch (JasonException je) {
                       System.err.println("Error adding plan:"+je);
                     }
        break;
      case 28:
        dir = directive(bbl, pp);
                     if (dir != null) {
                       // it is a begin or end
                       if (dir.getFunctor().equals("end")) {
                          DirectiveProcessor.process(lastBegin, plansForDirective, bbl, pp);
                          lastBegin = null;
                       } else {
                          lastBegin = dir;
                          plansForDirective = new ArrayList();
                       }
                     }
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                     if (lastBegin != null) {
                        {if (true) throw new ParseException("The directive '"+lastBegin+"' does not finish with an 'end'.");}
                     }
                     {if (true) return pp;}
    throw new Error("Missing return statement in function");
  }

/* Directive */
  final public Pred directive(List bbl, PlanLibrary pl) throws ParseException {
                             Pred d1 = null, d2 = null;
                             boolean isBegin = false;
                             boolean isEnd = false;
    jj_consume_token(28);
    d1 = pred();
                     isBegin = d1.getFunctor().equals("begin");
                     isEnd = d1.getFunctor().equals("end");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATOM:
      d2 = pred();
                     if (!isBegin) {
                        {if (true) throw new ParseException("Directive: a second predicate must follow 'begin'.");}
                     }
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(29);
                     if (isBegin) {
                        {if (true) return d2;}
                     } else if (isEnd) {
                        {if (true) return d1;}
                     } else {
                        // it is not begin/end directive, process it
                        DirectiveProcessor.process(d1, null, bbl, pl);
                        {if (true) return null;}
                     }
    throw new Error("Missing return statement in function");
  }

/* Plan */
  final public Plan plan() throws ParseException {
                        Token k; Pred L = null;
                        Trigger T; Object C = null;
                        ArrayList B = new ArrayList();
                        int start = -1, end;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_LABEL_AT:
      k = jj_consume_token(TK_LABEL_AT);
      L = pred();
                                    start = k.beginLine;
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    T = trigger();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 30:
      k = jj_consume_token(30);
      C = log_expr();
                                   if (start == -1) start = k.beginLine;
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      k = jj_consume_token(31);
      plan_body(B);
                                   if (start == -1) start = k.beginLine;
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    k = jj_consume_token(26);
                                   if (start == -1) start = k.beginLine;
                     end = k.beginLine;
                     Plan p = new Plan(L,T,(LogicalFormula)C,B);
                     p.setSourceLines(start,end);
                     {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

/* Trigger */
  final public Trigger trigger() throws ParseException {
                        boolean teType;
                                byte    teGoal = Trigger.TEBel;
                                        Literal F;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 32:
      jj_consume_token(32);
                 teType = Trigger.TEAdd;
      break;
    case 33:
      jj_consume_token(33);
                 teType = Trigger.TEDel;
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 27:
    case 34:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 27:
        jj_consume_token(27);
                 teGoal = Trigger.TEAchvG;
        break;
      case 34:
        jj_consume_token(34);
                 teGoal = Trigger.TETestG;
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case ATOM:
      F = literal();
      break;
    case VAR:
    case UNNAMEDVAR:
      F = var();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                 {if (true) return new Trigger(teType,teGoal,F);}
    throw new Error("Missing return statement in function");
  }

/* Literal */
  final public Literal literal() throws ParseException {
                       Pred F; Token k; boolean type = Literal.LPos;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_NEG:
    case ATOM:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_NEG:
        jj_consume_token(TK_NEG);
                                type = Literal.LNeg;
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      F = pred();
                                {if (true) return new Literal(type,F);}
      break;
    case TK_TRUE:
      k = jj_consume_token(TK_TRUE);
                                {if (true) return Literal.LTrue;}
      break;
    case TK_FALSE:
      k = jj_consume_token(TK_FALSE);
                                {if (true) return Literal.LFalse;}
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* Plan body */
  final public void plan_body(ArrayList bd) throws ParseException {
                                 BodyLiteral F;
    F = body_formula();
                             if (! F.getLogicalFormula().equals(Literal.LTrue)) {
                               bd.add(F);
                             }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 35:
      jj_consume_token(35);
      plan_body(bd);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
  }

  final public BodyLiteral body_formula() throws ParseException {
                                Literal A; Token k;
                                BodyType formType = BodyType.action;
                                Object rel; VarTerm v;
    if (jj_2_1(4)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 27:
        jj_consume_token(27);
                        formType = BodyType.achieve;
        break;
      case 36:
        jj_consume_token(36);
                        formType = BodyType.achieveNF;
        break;
      case 34:
        jj_consume_token(34);
                        formType = BodyType.test;
        break;
      case 32:
        jj_consume_token(32);
                        formType = BodyType.addBel;
        break;
      case 33:
        jj_consume_token(33);
                        formType = BodyType.delBel;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 32:
          jj_consume_token(32);
                        formType = BodyType.delAddBel;
          break;
        default:
          jj_la1[16] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_TRUE:
      case TK_FALSE:
      case TK_NEG:
      case ATOM:
        A = literal();
                        {if (true) return new BodyLiteral(formType,A);}
        break;
      case VAR:
      case UNNAMEDVAR:
        v = var();
                        {if (true) return new BodyLiteral(formType,v);}
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_TRUE:
      case TK_FALSE:
      case TK_NEG:
      case NUMBER:
      case STRING:
      case ATOM:
      case VAR:
      case UNNAMEDVAR:
      case 33:
      case 37:
        // actions or expressions
          rel = rel_expr();
                        if (rel instanceof Literal) {
                          {if (true) return new BodyLiteral(formType, (Literal)rel);}
                        } else {
                          {if (true) return new BodyLiteral((RelExpr)rel);}
                        }
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

/* Annotated Formulae */
  final public Pred pred() throws ParseException {
                      Token K; Pred p = new Pred(); Term t; List l; ListTerm lt;
    K = jj_consume_token(ATOM);
                      p.setFunctor(K.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 37:
      jj_consume_token(37);
      l = terms();
      jj_consume_token(38);
                      p.addTerms(l);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 40:
      lt = list();
                      p.setAnnots(lt);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

/* List of terms */
  final public List terms() throws ParseException {
                 List listTerms = new ArrayList(); Term v;
    v = term();
                         listTerms.add(v);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 39:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_4;
      }
      jj_consume_token(39);
      v = term();
                         listTerms.add(v);
    }
                         {if (true) return listTerms;}
    throw new Error("Missing return statement in function");
  }

  final public Term term() throws ParseException {
                      Term u; Object o;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case ATOM:
      u = literal();
      break;
    case 40:
      u = list();
      break;
    case NUMBER:
    case VAR:
    case UNNAMEDVAR:
    case 33:
    case 37:
      o = arithm_expr();
                      {if (true) return (NumberTerm)o;}
      break;
    case STRING:
      u = string();
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return u;}
    throw new Error("Missing return statement in function");
  }

  final public ListTermImpl list() throws ParseException {
                        ListTermImpl lt = new ListTermImpl(); ListTerm last;
                        Token K; Term f;
    jj_consume_token(40);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case NUMBER:
    case STRING:
    case ATOM:
    case VAR:
    case UNNAMEDVAR:
    case 33:
    case 37:
    case 40:
      f = term();
                            last = lt.append(f);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 39:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_5;
        }
        jj_consume_token(39);
        f = term();
                            last = last.append(f);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 41:
        jj_consume_token(41);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
          K = jj_consume_token(VAR);
                            last.setNext(new VarTerm(K.image));
          break;
        case UNNAMEDVAR:
          K = jj_consume_token(UNNAMEDVAR);
                            last.setNext(new UnnamedVar());
          break;
        case 40:
          f = list();
                            last = last.concat((ListTerm)f);
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    jj_consume_token(42);
                            {if (true) return lt;}
    throw new Error("Missing return statement in function");
  }

/* logical expression */
  final public Object log_expr() throws ParseException {
                           Object t1, t2;
    t1 = log_expr_trm();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 41:
      jj_consume_token(41);
      t2 = log_expr();
                           {if (true) return new LogExpr((LogicalFormula)t1,LogicalOp.or,(LogicalFormula)t2);}
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
                           {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public Object log_expr_trm() throws ParseException {
                             Object t1, t2;
    t1 = log_expr_factor();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 43:
      jj_consume_token(43);
      t2 = log_expr_trm();
                             {if (true) return new LogExpr((LogicalFormula)t1,LogicalOp.and,(LogicalFormula)t2);}
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
                             {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public Object log_expr_factor() throws ParseException {
                                      Object t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_NOT:
      jj_consume_token(TK_NOT);
      t = log_expr_factor();
                                      {if (true) return new LogExpr(LogicalOp.not,(LogicalFormula)t);}
      break;
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case NUMBER:
    case STRING:
    case ATOM:
    case VAR:
    case UNNAMEDVAR:
    case 33:
    case 37:
      t = rel_expr();
                                      {if (true) return t;}
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* relational expression 
   used in context, body and term
   
     <VAR>      [ <OPREL> <EXP> ]  --> this method returns the VarTerm
   | <LITERAL>  [ <OPREL> <EXP> ]  --> returns the Literal
   | <EXP>      [ <OPREL> <EXP> ]  --> returns the ExprTerm 
*/
  final public Object rel_expr() throws ParseException {
                                             Object op1 = null;
                                             Object op2 = null;
                                             RelationalOp operator = RelationalOp.none;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
    case VAR:
    case UNNAMEDVAR:
    case 33:
    case 37:
      op1 = arithm_expr();
      break;
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case ATOM:
      op1 = literal();
      break;
    case STRING:
      op1 = string();
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 44:
        jj_consume_token(44);
                                             operator = RelationalOp.lt;
        break;
      case 45:
        jj_consume_token(45);
                                             operator = RelationalOp.lte;
        break;
      case 46:
        jj_consume_token(46);
                                             operator = RelationalOp.gt;
        break;
      case 47:
        jj_consume_token(47);
                                             operator = RelationalOp.gte;
        break;
      case 48:
        jj_consume_token(48);
                                             operator = RelationalOp.eq;
        break;
      case 49:
        jj_consume_token(49);
                                             operator = RelationalOp.dif;
        break;
      case 50:
        jj_consume_token(50);
                                             operator = RelationalOp.unify;
        break;
      case 51:
        jj_consume_token(51);
                                             operator = RelationalOp.literalBuilder;
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case VAR:
      case UNNAMEDVAR:
      case 33:
      case 37:
        op2 = arithm_expr();
        break;
      case TK_TRUE:
      case TK_FALSE:
      case TK_NEG:
      case ATOM:
        op2 = literal();
        break;
      case STRING:
        op2 = string();
        break;
      case 40:
        op2 = list();
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                             {if (true) return new RelExpr((Term)op1, operator, (Term)op2);}
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
                                             {if (true) return op1;}
    throw new Error("Missing return statement in function");
  }

/* arithmetic expression */
  final public Object arithm_expr() throws ParseException {
                                Object t1, t2; ArithmeticOp op;
    t1 = arithm_expr_trm();
                                op = ArithmeticOp.none;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 32:
    case 33:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 32:
        jj_consume_token(32);
                                op = ArithmeticOp.plus;
        break;
      case 33:
        jj_consume_token(33);
                                op = ArithmeticOp.minus;
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = arithm_expr();
                                if (!(t1 instanceof NumberTerm)) {
                                   {if (true) throw new ParseException("ArithExpr: first operand is not numeric or variable.");}
                                }
                                if (!(t2 instanceof NumberTerm)) {
                                   {if (true) throw new ParseException("ArithExpr: second operand is not numeric or variable.");}
                                }
                                {if (true) return new ArithExpr((NumberTerm)t1, op, (NumberTerm)t2);}
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
                                {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public Object arithm_expr_trm() throws ParseException {
                                  Object t1, t2; ArithmeticOp op;
    t1 = arithm_expr_factor();
                                  op = ArithmeticOp.none;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_INTDIV:
    case TK_INTMOD:
    case 52:
    case 53:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
        jj_consume_token(52);
                                  op = ArithmeticOp.times;
        break;
      case 53:
        jj_consume_token(53);
                                  op = ArithmeticOp.div;
        break;
      case TK_INTDIV:
        jj_consume_token(TK_INTDIV);
                                  op = ArithmeticOp.intdiv;
        break;
      case TK_INTMOD:
        jj_consume_token(TK_INTMOD);
                                  op = ArithmeticOp.mod;
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = arithm_expr_trm();
                                  if (!(t1 instanceof NumberTerm)) {
                                    {if (true) throw new ParseException("ArithTerm: first operand is not numeric or variable.");}
                                  }
                                  if (!(t2 instanceof NumberTerm)) {
                                    {if (true) throw new ParseException("ArithTerm: second operand is not numeric or variable.");}
                                  }
                                  {if (true) return new ArithExpr((NumberTerm)t1, op, (NumberTerm)t2);}
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
                                  {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public Object arithm_expr_factor() throws ParseException {
                                  Object t1, t2; ArithmeticOp op;
    t1 = arithm_expr_simple();
                                  op = ArithmeticOp.none;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 54:
      jj_consume_token(54);
                                  op = ArithmeticOp.pow;
      t2 = arithm_expr_factor();
                                  if (!(t1 instanceof NumberTerm)) {
                                    {if (true) throw new ParseException("ArithFactor: first operand is not numeric or variable.");}
                                  }
                                  if (!(t2 instanceof NumberTerm)) {
                                    {if (true) throw new ParseException("ArithFactor: second operand is not numeric or variable.");}
                                  }
                                  {if (true) return new ArithExpr((NumberTerm)t1, op, (NumberTerm)t2);}
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
                                  {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public Object arithm_expr_simple() throws ParseException {
                                  Token K; Object t; VarTerm v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      K = jj_consume_token(NUMBER);
                                  {if (true) return new NumberTermImpl(K.image);}
      break;
    case 33:
      jj_consume_token(33);
      t = arithm_expr_simple();
                                  if (!(t instanceof NumberTerm)) {
                                    {if (true) throw new ParseException("operator '-' applied to argument not numeric or variable.");}
                                  }
                                  {if (true) return new ArithExpr(ArithmeticOp.minus, (NumberTerm)t);}
      break;
    case 37:
      jj_consume_token(37);
      t = log_expr();
      jj_consume_token(38);
                                  {if (true) return t;}
      break;
    case VAR:
    case UNNAMEDVAR:
      v = var();
                                  {if (true) return v;}
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public VarTerm var() throws ParseException {
                      Token K; VarTerm v; ListTerm lt;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      K = jj_consume_token(VAR);
                      v = new VarTerm(K.image);
      break;
    case UNNAMEDVAR:
      K = jj_consume_token(UNNAMEDVAR);
                      v = new UnnamedVar();
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 40:
      lt = list();
                      v.setAnnots(lt);
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
                      {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public StringTerm string() throws ParseException {
                      Token k;
    k = jj_consume_token(STRING);
                      {if (true) return new StringTermImpl(k.image.substring(1,k.image.length()-1));}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_3R_36() {
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_scan_token(TK_FALSE)) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_scan_token(TK_TRUE)) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_scan_token(TK_NEG)) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_scan_token(40)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_scan_token(37)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_scan_token(UNNAMEDVAR)) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_21()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_scan_token(ATOM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_scan_token(37)) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_scan_token(33)) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_scan_token(32)) return true;
    return false;
  }

  final private boolean jj_3R_11() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_scan_token(33)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_9() {
    if (jj_scan_token(32)) return true;
    return false;
  }

  final private boolean jj_3R_8() {
    if (jj_scan_token(34)) return true;
    return false;
  }

  final private boolean jj_3R_7() {
    if (jj_scan_token(36)) return true;
    return false;
  }

  final private boolean jj_3R_6() {
    if (jj_scan_token(27)) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) return true;
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    }
    return false;
  }

  public as2jTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[43];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x20580,0x2000000,0x8000000,0x10002000,0x10002000,0x20000,0x2000,0x40000000,0x80000000,0x0,0x8000000,0x8000000,0xe0580,0x400,0x20580,0x0,0x0,0x8000000,0xe0580,0xf4580,0x0,0x0,0x0,0xf4580,0x0,0xc0000,0x0,0xf4580,0x0,0x0,0xf4780,0xf4580,0x0,0xf4580,0x0,0x0,0x0,0x1800,0x1800,0x0,0xc4000,0xc0000,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x3,0x3,0x0,0x0,0x0,0x0,0x3,0x4,0x4,0x0,0x0,0x0,0x8,0x1,0x17,0x0,0x22,0x20,0x100,0x80,0x122,0x80,0x100,0x200,0x122,0x200,0x800,0x22,0x22,0xff000,0x122,0xff000,0x3,0x3,0x300000,0x300000,0x400000,0x22,0x0,0x100,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public as2j(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new as2jTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public as2j(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new as2jTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public as2j(as2jTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(as2jTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[55];
    for (int i = 0; i < 55; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 43; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 55; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }

<?xml version="1.0"?>

<!DOCTYPE MODE SYSTEM "xmode.dtd">

<!--	jEdit AgentSpeak syntax file see http://jason.sf.net
	written by Jomi F. Hubner
-->

<MODE>
	<PROPS>
		<PROPERTY NAME="lineComment" VALUE="//" />
		<PROPERTY NAME="commentStart" VALUE="/*" />
		<PROPERTY NAME="commentEnd" VALUE="*/" />
	</PROPS>

	<RULES ESCAPE="\" IGNORE_CASE="FALSE" HIGHLIGHT_DIGITS="TRUE">
	
		<!-- Comments -->
		<EOL_SPAN TYPE="COMMENT4">//</EOL_SPAN>
		<!--- ISO compliant C-style comments -->
		<SPAN TYPE="COMMENT1">
			<BEGIN>/*</BEGIN>
			<END>*/</END>
		</SPAN>
		
		<!-- String literals -->
		<SPAN TYPE="LITERAL1" NO_LINE_BREAK="TRUE">
			<BEGIN>"</BEGIN>
			<END>"</END>
		</SPAN>

		<!-- Vars -->
		<SEQ_REGEXP TYPE="MARKUP" HASH_CHAR="A">A([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="MARKUP" HASH_CHAR="B">B([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="MARKUP" HASH_CHAR="C">C([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="MARKUP" HASH_CHAR="D">D([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="MARKUP" HASH_CHAR="E">E([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="MARKUP" HASH_CHAR="F">F([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="MARKUP" HASH_CHAR="G">G([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="MARKUP" HASH_CHAR="H">H([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="MARKUP" HASH_CHAR="I">I([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="MARKUP" HASH_CHAR="J">J([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="MARKUP" HASH_CHAR="K">K([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="MARKUP" HASH_CHAR="L">L([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="MARKUP" HASH_CHAR="M">M([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="MARKUP" HASH_CHAR="N">N([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="MARKUP" HASH_CHAR="O">O([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="MARKUP" HASH_CHAR="P">P([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="MARKUP" HASH_CHAR="Q">Q([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="MARKUP" HASH_CHAR="R">R([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="MARKUP" HASH_CHAR="S">S([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="MARKUP" HASH_CHAR="T">T([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="MARKUP" HASH_CHAR="U">U([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="MARKUP" HASH_CHAR="V">V([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="MARKUP" HASH_CHAR="X">X([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="MARKUP" HASH_CHAR="Z">Z([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="MARKUP" HASH_CHAR="W">W([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="MARKUP" HASH_CHAR="Y">Y([[:alnum:]])*</SEQ_REGEXP>

		<!-- Internal actions -->
		<SEQ_REGEXP TYPE="FUNCTION" HASH_CHAR=".">\.([[:alnum:]])+</SEQ_REGEXP>

		<MARK_FOLLOWING TYPE="LABEL">@</MARK_FOLLOWING>

		<!-- literals -->
 		<SEQ TYPE="LITERAL1">true</SEQ>
 		<SEQ TYPE="LITERAL1">tell</SEQ>
 		<SEQ TYPE="LITERAL1">untell</SEQ>
 		<SEQ TYPE="LITERAL1">tellHow</SEQ>
 		<SEQ TYPE="LITERAL1">untellHow</SEQ>
 		<SEQ TYPE="LITERAL1">achieve</SEQ>
 		<SEQ TYPE="LITERAL1">unachieve</SEQ>
 		<SEQ TYPE="LITERAL1">askOne</SEQ>
 		<SEQ TYPE="LITERAL1">askAll</SEQ>
 		<SEQ TYPE="LITERAL1">askHow</SEQ>
		<!-- reserved annotations -->
 		<SEQ TYPE="LITERAL4">atomic</SEQ>
 		<SEQ TYPE="LITERAL4">breakpoint</SEQ>

		<!-- Atoms -->
		<SEQ_REGEXP TYPE="KEYWORD1" HASH_CHAR="a">a([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="KEYWORD1" HASH_CHAR="b">b([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="KEYWORD1" HASH_CHAR="c">c([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="KEYWORD1" HASH_CHAR="d">d([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="KEYWORD1" HASH_CHAR="e">e([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="KEYWORD1" HASH_CHAR="f">f([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="KEYWORD1" HASH_CHAR="g">g([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="KEYWORD1" HASH_CHAR="h">h([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="KEYWORD1" HASH_CHAR="i">i([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="KEYWORD1" HASH_CHAR="j">j([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="KEYWORD1" HASH_CHAR="k">k([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="KEYWORD1" HASH_CHAR="l">l([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="KEYWORD1" HASH_CHAR="m">m([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="KEYWORD1" HASH_CHAR="n">n([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="KEYWORD1" HASH_CHAR="o">o([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="KEYWORD1" HASH_CHAR="p">p([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="KEYWORD1" HASH_CHAR="q">q([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="KEYWORD1" HASH_CHAR="r">r([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="KEYWORD1" HASH_CHAR="s">s([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="KEYWORD1" HASH_CHAR="t">t([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="KEYWORD1" HASH_CHAR="u">u([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="KEYWORD1" HASH_CHAR="v">v([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="KEYWORD1" HASH_CHAR="x">e([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="KEYWORD1" HASH_CHAR="z">z([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="KEYWORD1" HASH_CHAR="w">w([[:alnum:]])*</SEQ_REGEXP>
		<SEQ_REGEXP TYPE="KEYWORD1" HASH_CHAR="y">y([[:alnum:]])*</SEQ_REGEXP>

		<!-- plans delimiters -->
		<SEQ TYPE="KEYWORD2">:</SEQ>
		<SEQ TYPE="KEYWORD2">&lt;-</SEQ>

		<SEQ TYPE="KEYWORD3">!</SEQ>
		<SEQ TYPE="KEYWORD3">?</SEQ>

		<!-- Operators -->
		<SEQ TYPE="OPERATOR">==</SEQ>
		<SEQ TYPE="OPERATOR">\==</SEQ>
		<SEQ TYPE="OPERATOR">=</SEQ>
		<SEQ TYPE="OPERATOR">&gt;=</SEQ>
		<SEQ TYPE="OPERATOR">&lt;=</SEQ>
		<SEQ TYPE="OPERATOR">&gt;</SEQ>
		<SEQ TYPE="OPERATOR">&lt;</SEQ>

		<SEQ TYPE="OPERATOR">+</SEQ>
		<SEQ TYPE="OPERATOR">-</SEQ>
		<SEQ TYPE="OPERATOR">/</SEQ>
		<SEQ TYPE="OPERATOR">*</SEQ>
		<SEQ TYPE="OPERATOR">**</SEQ>
		<SEQ TYPE="OPERATOR">%</SEQ>

		<SEQ TYPE="OPERATOR">&amp;</SEQ>
		<SEQ TYPE="OPERATOR">not</SEQ>
		<SEQ TYPE="OPERATOR">~</SEQ>
		

		<!-- Parentheses -->
		<!--SEQ TYPE="MARKUP">(</SEQ>
		<SEQ TYPE="MARKUP">)</SEQ>
		<SEQ TYPE="NULL">{</SEQ>
		<SEQ TYPE="NULL">}</SEQ-->		

		<KEYWORDS>
		</KEYWORDS>
		
	</RULES>

</MODE>
